<?php

/**
 * @file
 * Fill form elements with data from GET, POST values or from external modules.
 *
 * Originally written by ea. Farris <eafarris@gmail.com>
 * Based on an idea from chx, from the conversation at
 * http://www.drupal.org/node/27155.
 */

/**
 * Implementation of hook_help().
 */
function prepopulate_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Pre-populates forms with HTTP GET or POST data');
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function prepopulate_form_alter(&$form, $form_state, $form_id) {
  $data = _prepopulate_get_data();
  if (!empty($data)) {
    $form['#after_build'][] = 'prepopulate_after_build';
  }
}

/**
 * Implementation of hook_prepopulate().
 */
function prepopulate_prepopulate() {
  $request = array();
  // Provide for accepting base64 encoded fields.
  if (isset($_REQUEST['pp'])) {
    parse_str(base64_decode($_REQUEST['pp']), $_REQUEST);
  } 
  if (isset($_REQUEST['edit'])) {
    $request = (array)$_REQUEST['edit'];
  }
  return $request;
}

/**
 * An #after_build function to set the values prepopulated in the request.
 */
function prepopulate_after_build($form, &$form_state) {
  _prepopulate_request_walk($form, _prepopulate_get_data());
  return $form;
  }

/**
 * Returns the data to prepopulate
 */
function _prepopulate_get_data() {
  static $data = FALSE;
  if ($data === FALSE) {
    $data = module_invoke_all('prepopulate');
  }
  return $data;
}

/**
 * Internal helper to set element values from the $_REQUEST variable.
 *
 * @param &$form
 *   Array. A form element.
 * @param &$requestslice
 *   String or array. Value(s) to be applied to the element.
 */
function _prepopulate_request_walk(&$form, &$requestslice) {
  $limited_types = array('value', 'hidden', 'button', 'image_button');
  if (is_array($requestslice)) {
    foreach (array_keys($requestslice) as $requestvar) {
      if (element_child($requestvar) && isset($form[$requestvar]) && !is_null($form[$requestvar]) &&
       (!isset($form[$requestvar]['#type']) || !in_array($form[$requestvar]['#type'], $limited_types))) {
        if (!isset($form[$requestvar]['#access']) || $form[$requestvar]['#access'] != FALSE) {
          _prepopulate_request_walk($form[$requestvar], $requestslice[$requestvar]);
        }
      }
    }
    if (isset($form['#default_value']) && is_array($form['#default_value'])) {
      $form['#default_value'] = array_merge($form['#default_value'], $requestslice);
    }
  }
  else {
    if ($form['#type'] == 'markup' || empty($form['#type']) ) {
      $form['#value'] = check_plain($requestslice);  
    }
    else {
      $form['#value'] = $requestslice;
    }
  }
}

