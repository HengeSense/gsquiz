<?php

/**
 * @file
 * Quiz_progress module file.
 */
/**
 * Implementation of hook_menu()
 */
function quiz_progress_menu() {
  $items['admin/quiz/settings/quiz_progress'] = array(
    'title' => '@quiz progress configuration',
    'title arguments' => array('@quiz' => QUIZ_NAME),
    'description' => t('Configure @quiz settings.', array('@quiz' => QUIZ_NAME)),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quiz_progress_config_form'),
    'access arguments' => array('administer quiz configuration'),
    'type' => MENU_NORMAL_ITEM, // optional
    'file' => 'quiz_progress.admin.inc',
  );
  $items['node/%node/quiz_progress_set_filter'] = array(
    'title' => '',
    'page callback' => '_quiz_progress_set_filter',
    'page arguments' => array(1),
    'access callback' => 'quiz_take_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function _quiz_progress_set_filter($quiz) {
  if (!isset($_SESSION['quiz_progress_show_kipped'])) {
    $_SESSION['quiz_progress_show_kipped'] = TRUE;
  }

  $_SESSION['quiz_progress_show_kipped'] = !$_SESSION['quiz_progress_show_kipped'];
  drupal_goto('node/' . $quiz->nid . '/take');
}

/**
 * Implementation of hook_permission()
 */
function quiz_progress_permission() {
	  $perms = array(
    'access_quiz_progress' => array(
      'title' => t('Access Quiz Progress'),
      'description' => t('View quiz progress grid.'),
    ),
  );
  return $perms;
}

/**
 * Implementation of hook_block_info()
 */
function quiz_progress_block_info() {
 	$blocks['quiz_progress_block'] = array(
    'info' => t('@quiz progress block', array('@quiz' => QUIZ_NAME)),
    //'info' => t('Quiz Progress Block'),
  );
  return $blocks;
}

/**
 *  Implementation of hook_block_view().
 */
function quiz_progress_block_view($delta = '') {
  switch ($delta) {
    case 'quiz_progress_block':
    //if (true) {
    if (user_access('access_quiz_progress')) {
    	if(quiz_progress_is_correct_page()) {
      		$quiz_nid = arg(1);
      		$quiz = node_load($quiz_nid);
      		//if (true) {
      		if (quiz_progress_block_access($quiz)) {
        		$block['content'] = quiz_progress_block_content($quiz);
        		$block['subject'] = $quiz->title;
        		return $block;
      		}
    	}
    }
  }
}

function quiz_progress_is_correct_page() {
  return arg(0) == 'node' &&
    arg(2) == 'take';
 }

function quiz_progress_block_access($quiz) {
  return arg(0) == 'node' &&
    arg(2) == 'take' &&
    is_object($quiz) &&
    $quiz-> allow_jumping &&
    isset($_SESSION['quiz_' . $quiz->nid]['result_id']) &&
    $_SESSION['quiz_' . $quiz->nid]['result_id'] > 0;
}

function quiz_progress_block_content($quiz) {
  _quiz_progress_block_load_styles();
  $questions = quiz_progress_get_questions($quiz);
  $output = quiz_progress_block_skipped_filter($quiz);
  $output .= quiz_progress_block_get_styled_output($quiz, $questions);
  return $output;
}

/*function _quiz_get_num_always_questions($vid) {
  return db_query('SELECT COUNT(*) FROM {quiz_node_relationship}
          WHERE parent_vid = :parent_vid AND question_status = :question_status', array(':parent_vid' => $vid, ':question_status' => QUESTION_ALWAYS))->fetchField();
}

function quiz_get_number_of_questions($vid) {
  $always_count = _quiz_get_num_always_questions($vid);
  $rand_count = db_query('SELECT number_of_random_questions FROM {quiz_node_properties} WHERE vid = :vid', array(':vid' => $vid))->fetchField();
  return $always_count + (int) $rand_count;
}*/

function quiz_progress_get_questions($quiz) {    
  if (
      !isset($_SESSION['quiz_' . $quiz->nid]['quiz_progress_questions']) ||
      (count($_SESSION['quiz_' . $quiz->nid]['quiz_progress_questions']) != quiz_get_number_of_questions($quiz->vid))
    ) {
    $_SESSION['quiz_' . $quiz->nid]['quiz_progress_questions'] = $_SESSION['quiz_' . $quiz->nid]['quiz_questions'];
  }
  
  return $_SESSION['quiz_' . $quiz->nid]['quiz_progress_questions'];  
}

function quiz_progress_block_skipped_filter($quiz) {
  if (isset($_SESSION['quiz_progress_show_kipped']) &&  $_SESSION['quiz_progress_show_kipped']) {
    $text = t('Show all');
  }
  else {
    $text = t('Show only the skipped questions');
  }
  return l($text, 'node/' . $quiz->nid . '/quiz_progress_set_filter');
}

function quiz_progress_get_link_options($status, $question, $question_title) {
  $color = variable_get('quiz_progress_output_text_color_' . $status, '');
  return array(
    'fragment' => ' ',
    'external' => TRUE,
    'attributes' => array(
      'class' => 'quiz-progress ' . $status,
      'id' => 'quiz-progress-id-' . $question['number'],
      'title' => $question_title,
      'style' => "color: $color;"
    ),
  );
}

function quiz_progress_block_get_styled_output($quiz, $questions) {
  if (isset($_SESSION['quiz_progress_show_kipped']) &&  $_SESSION['quiz_progress_show_kipped']) {
    $items = array();
    drupal_add_js(array('quiz_progress' => array('show_kipped' => 1)), 'setting');
    $title_length = variable_get('quiz_progress_title_style_length', 32);
    foreach ($questions as $question) {
      if (empty($question)) {
       continue;
      }
      $status = _quiz_progress_get_question_status($quiz, $question);
      if ($status != 'skipped') {
        continue;
      }
      $question_title = _quiz_progress_get_question_title($question);
      $status = _quiz_progress_get_question_status($quiz, $question);
      $options = quiz_progress_get_link_options($status, $question, $question_title);
      $items[$question['nid']] = l(drupal_substr($question_title, 0, $title_length), '', $options);
    }
    
    if (empty($items)) {
      return '<p>' . t('You have no skipped questions') . '</p>';
    }
    return '<div class="quiz-progress-block-wrapper">' .
      //theme('item_list', $items, t('Questions'), 'ol', array('class' => 'quiz-progress-item-list')) .
      theme('item_list', array(
      'items' => $items,
      'title' => t('Questions'),
      'type' => 'ol',
      'attributes' => array('class' => 'quiz-progress-item-list'))) .
      '</div>';
  }
  $output_style = variable_get('quiz_progress_output_style', 'number');
  if ($output_style == 'number') {
    $rows = array();
    $items = array();
    $row = 0;
    $col_size = variable_get('quiz_progress_number_style_col_size', 4);
    foreach ($questions as $question) {
      if (empty($question)) {
       continue;
      }
      drupal_add_js(array('quiz_progress' => array('show_kipped' => 1)), 'setting');
      $title_length = variable_get('quiz_progress_title_style_length', 32);      
      $question_title = _quiz_progress_get_question_title($question);
      $question_title = strip_tags($question_title);
      $status = _quiz_progress_get_question_status($quiz, $question);
      $bg_color = variable_get('quiz_progress_output_bg_color_' . $status);
      $options = quiz_progress_get_link_options($status, $question, $question_title);
      $rows[$row][$question['number']] = array(
        'data' => l($question['number'], '', $options),
        'class' => $status,
        'style' => "background-color: $bg_color;border: 1px solid black"
      );
      $row = $question['number'] % $col_size != 0 ? $row : $row + 1;
    }
    // TODO : Use hook_theme to allow other module to override the output.
    return  '<div class="quiz-progress-block-wrapper">' . 
      //theme('table', array(), $rows, array('class' => 'quiz-progress-item-table')) .
      theme('table', array(
      'header' => array(), 
      'rows' => $rows, 
      'attributes' => array('class' => 'quiz-progress-item-table'))) . '</div>';
  }
  else if ($output_style == 'title') {
    $items = array();
    $title_length = variable_get('quiz_progress_title_style_length', 32);
    foreach ($questions as $question) {
      if (empty($question)) {
       continue;
      }
      $question_title = _quiz_progress_get_question_title($question);
      $status = _quiz_progress_get_question_status($quiz, $question);
      $options = quiz_progress_get_link_options($status, $question, $question_title);
      $bg_color = variable_get('quiz_progress_output_bg_color_' . $status, '');
      $items[$question['number']] = array(
        'data' => l(drupal_substr($question_title, 0, $title_length), '', $options),
        'class' => $status,
        'style' => "background-color: $bg_color;"
      );
    }
    return '<div class="quiz-progress-block-wrapper">' .
      //theme('item_list', $items, t('Questions'), 'ol', array('class' => 'quiz-progress-item-list')) .
      theme('item_list', array(
      'items' => $items,
      'title' => t('Questions'),
      'type' => 'ul',
      'attributes' => array('class' => 'quiz-progress-item-list'))) .
      '</div>';
  }
  //return ''; 
}

function _quiz_progress_get_question_status($quiz, $question) {
  $rid = $_SESSION['quiz_'. $quiz->nid]['result_id'];
  $query = db_query('SELECT is_correct, is_skipped FROM {quiz_node_results_answers}
    WHERE result_id = :r_id AND question_nid = :q_nid AND question_vid = :q_vid',
  	array(':r_id' => $rid,
  		  ':q_nid' => $question['nid'],
  		  ':q_vid' => $question['vid'])
  );
  $answer = $query->fetch();
  if (empty($answer)) {
    return 'queued';
  }
  else {
    if ($answer->is_skipped) {
      return 'skipped';
    }
    else {
      return 'answered';
    }
  }
}

function _quiz_progress_get_question_title($question) {
  $query = db_query('SELECT title FROM {node_revision}
    WHERE nid = :nid AND vid = :vid',
    array(':nid' => $question['nid'],
  		  ':vid' => $question['vid']));
  $quiz_title = $query->fetchField();
  return (bool) $quiz_title ? check_plain($quiz_title) : '';
}

function _quiz_progress_block_load_styles() {
  $module_path = drupal_get_path('module', 'quiz_progress');
  drupal_add_css($module_path . '/css/quiz_progress.css');
  drupal_add_js($module_path . '/js/jquery.dimensions.js');
  drupal_add_js($module_path . '/js/jquery.tooltip.js');
  drupal_add_js($module_path . '/js/quiz_progress.js');
}
